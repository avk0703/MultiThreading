/**
 * @author Avni
 *MultiThread2:Creating Child Threads.
 */
class MultiThread2 implements Runnable{
	Thread t;
	String f;
	MultiThread2(String s){
		f=s;
		t=new Thread(this,s);
		System.out.println("Thread :"+t);
		t.start();
	}
	public void run(){
		try{
			for(int i=5;i>0;--i){
				System.out.println(f+":"+i);
				Thread.sleep(1000);
			}
		}
		catch(Exception e){
			System.out.println(e);
		}
	}
}
/**
 * @author Avni
 *MultipleThreadDemo2:Initiating MultiThread and Depicting the usage of isAlive() and join() methods.
 */
public class MultipleThreadDemo2 {
	public static void main(String args[]){
		MultiThread2 ob1=new MultiThread2("One");
		MultiThread2 ob2=new MultiThread2("Two");
		MultiThread2 ob3=new MultiThread2("Three");
		
		System.out.println("Thread One is alive: "+ ob1.t.isAlive());
		System.out.println("Thread Two is alive: "+ ob2.t.isAlive());
		System.out.println("Thread Three is alive: "+ ob3.t.isAlive());
		try{
			System.out.println("Waiting for threads to finish.");
			ob1.t.join();
			ob2.t.join();
			ob3.t.join();
		}
		catch(Exception e){
			System.out.println(e);
		}

		System.out.println("Thread One is alive: "+ ob1.t.isAlive());
		System.out.println("Thread Two is alive: "+ ob2.t.isAlive());
		System.out.println("Thread Three is alive: "+ ob3.t.isAlive());
	}
}
